#!/usr/bin/env python
PACKAGE = "limo_application"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# bev = gen.add_group("BEV Transform")

# bev_lu = bev.add_group("Left Upper Point")
# bev_ru = bev.add_group("Right Upper Point")
# bev_ll = bev.add_group("Left Lower Point")
# bev_rl = bev.add_group("Right Lower Point")

# bev_lu.add("left_upper_x_pos", int_t,  0, "Left Upper Point x", 0, 0, 640)
# bev_lu.add("left_upper_y_pos", int_t,  0, "Left Upper Point x", 0, 0, 480)
# bev_ru.add("right_upper_x_pos", int_t,  1, "Right Upper Point x", 0, 0, 640)
# bev_ru.add("right_upper_y_pos", int_t,  1, "Right Upper Point x", 0, 0, 480)
# bev_ll.add("left_lower_x_pos", int_t,  2, "Left Lower Point x", 0, 0, 640)
# bev_ll.add("left_lower_y_pos", int_t,  2, "Left Lower Point x", 0, 0, 480)
# bev_rl.add("right_lower_x_pos", int_t,  3, "Right Lower Point x", 0, 0, 640)
# bev_rl.add("right_lower_y_pos", int_t,  3, "Right Lower Point x", 0, 0, 480)

color_detection = gen.add_group("Yellow Lane Detection")
color_detection.add("yellow_h_low",    int_t,    4, "H Channel Low threshold", 50,  0, 255)
color_detection.add("yellow_h_high",    int_t,    5, "H Channel High threshold", 50,  0, 255)
color_detection.add("yellow_l_low",    int_t,    6, "L ChannelLow threshold", 50,  0, 255)
color_detection.add("yellow_l_high",    int_t,    7, "L Channel High threshold", 50,  0, 255)
color_detection.add("yellow_s_low",    int_t,    8, "S Channel Low threshold", 50,  0, 255)
color_detection.add("yellow_s_high",    int_t,    9, "S Channel High threshold", 50,  0, 255)

# color_detection = gen.add_group("white Lane Detection")
# color_detection.add("white_h_low",    int_t,    10, "H Channel Low threshold", 50,  0, 255)
# color_detection.add("white_h_high",    int_t,    11, "H Channel High threshold", 50,  0, 255)
# color_detection.add("white_l_low",    int_t,    12, "L ChannelLow threshold", 50,  0, 255)
# color_detection.add("white_l_high",    int_t,    13, "L Channel High threshold", 50,  0, 255)
# color_detection.add("white_s_low",    int_t,    14, "S Channel Low threshold", 50,  0, 255)
# color_detection.add("white_s_high",    int_t,    15, "S Channel High threshold", 50,  0, 255)

# lane_calculator = gen.add_group("Lane Calculator")
# lane_calculator.add("ref_line_x", int_t, 16, "Reference Line for calculate distance", 320, 0, 640)


exit(gen.generate(PACKAGE, "limo_application", "image_processing"))